@{
    ViewData["Title"] = "Home Page";
}
<!DOCTYPE html>
<meta charset="utf-8">
<style>
    .links line {
        stroke: #999;
        stroke-opacity: 0.6;
    }

    .nodes circle {
        stroke: #fff;
        stroke-width: 1.5px;
    }

    text {
        font-family: sans-serif;
        font-size: 8px;
    }
</style>
<!--svg width="960" height="600"></svg-->
<script src="~/lib/webcomponentsjs/webcomponents-lite.min.js"></script>
<link rel="import" href="~/lib/iron-ajax/iron-ajax.html">
<svg width="960" height="600"></svg>
<script src="~/lib/d3.v4.min.js"></script>

<div>
    <button type="button" onclick="myAnimate()">Animate</button>
    <button type="button" onclick="myFunction()">GetAjax</button>

</div>

<iron-ajax auto
           id="ajax"
           url="/api"
           params=""
           handle-as="json"
           on-response="handleResponse"
           debounce-duration="300"
           last-response="{{jsonresp}}">

</iron-ajax>



<script>

    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");

    var color = d3.scaleOrdinal(d3.schemeCategory20);

    var linkDistanceVariable = 50;
    
    var simulation = d3.forceSimulation()
        .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(200))
        .force("charge", d3.forceManyBody())
        .force("center", d3.forceCenter(width / 2 , height / 2 ));



    d3.json("miserables.json", function (error, graph) {
        if (error) throw error;

        svg.append("svg:defs").selectAll("marker")
            .data(["end"])      // Different link/path types can be defined here
            .enter().append("svg:marker")    // This section adds in the arrows
            .attr("id", String)
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 15)
            .attr("refY", 0.5)
            .attr("markerWidth", 2)
            .attr("markerHeight", 2)
            .attr("orient", "auto")
            .append("svg:path")
            .attr("d", "M0,-5L10,0L0,5");


        var link = svg.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(graph.links)
            .enter().append("line")
            .attr("marker-end", "url(#end)")
            .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

        var node = svg.append("g")
            .attr("class", "nodes")
            .selectAll("g")
            .data(graph.nodes)
            .enter().append("g")

        var circles = node.append("circle")
            .attr("r", 20)
            .attr("fill", function (d) { return color(d.group); })
            .attr("id", function (d) { return d.id; })
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

        var lables = node.append("text")
            .text(function (d) {
                return d.id;
            })
            .attr('x', 20)
            .attr('y', 3)
            

        node.append("title")
            .text(function (d) { return d.id; });

        simulation
            .nodes(graph.nodes)
            .on("tick", ticked);

        simulation.force("link")
            .links(graph.links);



        function ticked() {
            link
                .attr("x1", function (d) { return d.source.x; })
                .attr("y1", function (d) { return d.source.y; })
                .attr("x2", function (d) { return d.target.x; })
                .attr("y2", function (d) { return d.target.y; });

            node
                .attr("transform", function (d) {
                    return "translate(" + d.x + "," + d.y + ")";
                })
        }
    });

    function dragstarted(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
    }

    function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function dragended(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }

 

    function UpdateState(s, x)
    {

        d3.select(s).attr("r", x); 
    

    }

    function SubmitReq() {
        var ajaxresp = document.getElementById('ajax');
        
        var i;
        ajaxresp.generateRequest();

        if (ajaxresp.lastResponse.length != null) {
            for (i = 0; i < ajaxresp.lastResponse.length; i++) {
                UpdateState("#" + ajaxresp.lastResponse[i].topicName, 25);
            }
        } else { 
            console.log("Nothing received");
        }
           
 
        
    };

    function myFunction() {
        setInterval(function () { SubmitReq(); }, 2000);
        setInterval(function () { d3.selectAll("circle").attr("r", 20); }, 3000);
    }; 
</script>